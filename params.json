{
  "name": "Netns-vpn",
  "tagline": "Run OpenVPN in network namespace using systemd",
  "body": "## Запуск отдельных приложений через OpenVPN без контейнеров и виртуализации\r\n\r\nОригинал статьи написан для публикации на сайте habrahabr.ru и находится [тут](https://habrahabr.ru/post/310646/ \"тут\"). Копия на sohabr находится [тут](https://sohabr.net/habr/post/310646/ \"тут\").\r\n\r\nКак-то одним прекрасным утром я рассказывал в телеграмме бывшему другу и коллеге о том, что такое network namespaces в Linux и с чем его едят. Коллега восхитился, так же, как я, в свое время, а мне пришла в голову, что надо не костылить скриптом, как я делал до этого, а автоматизировать запуск отдельного network namespace и OpenVPN в нем. Так как я использую Debian Sid и Ubuntu 16.04 LTS автоматизацию я себе сделал в виде юнитов systemd, но об этом в конце статьи. После того, как я рассказал еще одному человеку, на этот раз далекому от IT, о возможности запускать только одно приложение, например браузер, под VPN, а остальные, как и прежде, он сказал «Только ради этого стоит перейти на Linux на компе», а я решил написать статью-инструкцию, как это сделать.\r\n\r\nО том, что такое network namespaces в Linux написано много, но для тех кто не знает я кратко процитирую попавшееся под руку описание на русском языке:\r\n\r\n«В linux относительно давно появилась такая замечательная вещь, как неймспейсы (namespaces). Основное применение данной технологии — контейнерная виртуализация, но и на маршрутизаторе можно придумать много разных применений, так как среди неймспейсов есть «network namespaces». Network namespaces позволяют в рамках одной машины в каждом неймспейсе иметь:\r\n\r\n- свой набор таблиц маршрутизации (а их 2^31-1 шт)\r\n- свою arp-таблицу\r\n- свои правила iptables\r\n- свои устройства (а значит и qdisc + class'ы tc)»\r\n\r\nА теперь перейдем к теме нашей статьи.\r\n\r\nСкрипт, для ручного поднятия network namespace и запуска в нем OpenVPN с комментированием:\r\n```bash\r\n#!/bin/bash\r\nsudo ip netns add vpn # создаем namespace по имени vpn\r\nsudo ip netns exec vpn ip addr add 127.0.0.1/8 dev lo # создаем в нем интерфейс lo\r\nsudo ip netns exec vpn ip link set lo up # поднимаем loopback-интерфейс в netns\r\nsudo ip link add vpn0 type veth peer name vpn1 # добавляем в системе виртуальный интерфейс, через который будет netns общаться с внешним миром\r\nsudo ip link set vpn0 up # поднимаем созданный интерфейс\r\nsudo ip link set vpn1 netns vpn up # создаем в netns интерфейс для общения во внешнем мире\r\nsudo ip addr add 10.10.10.1/24 dev vpn0 # добавляем адрес на интерфейсе в системе\r\nsudo ip netns exec vpn ip addr add 10.10.10.2/24 dev vpn1 # добавляем адрес на интерфейсе в netns\r\nsudo ip netns exec vpn ip route add VPN_IP via 10.10.10.1 dev vpn1 # добавляем маршрут до VPN-сервера(замените VPN_IP на адрес вашего сервера)\r\nsudo ip netns exec vpn ip route add default via 10.10.10.254 dev vpn1 # Добавляем адрес которого у нас нет в сети в качестве гейтвея, что бы OpenVPN мог заменить при запуске гейтвей на свой(если не будет никакого гейта, то OpenVPN не сможет назначить гейт и пакеты во вне у нас ходить через него не будут) \r\nsudo iptables -A INPUT ! -i vpn0 -s 10.10.10.0/24 -j DROP \r\nsudo iptables -t nat -A POSTROUTING -s 10.10.10.0/24 -o en+ -j MASQUERADE # настраиваем маскарадинг, замените en+ на wl+ если вы используете wifi-сетевуху для подключения к сети\r\nsudo sysctl  -q net.ipv4.ip_forward=1 # разрешаем форвардинг пакетов\r\nsudo mkdir -p /etc/netns/vpn # создаем директорию в которой у нас будет лежать resolv.conf для нашего netns \r\necho \"nameserver 8.8.8.8\" |sudo tee /etc/netns/vpn/resolv.conf # прописываем гугловый 8.8.8.8 в качестве ДНСа\r\nsudo ip netns exec vpn /usr/sbin/openvpn --daemon --writepid /run/openvpn/vpn.pid --cd /etc/openvpn/ --config vpn.conf  # Запускаем OpenVPN с конфиг-файлом /etc/openvpn/vpn.conf внутри netns\r\n```\r\nВыполнив этот скрипт мы можем при помощи команды:\r\n```bash\r\n$ sudo ip netns exec vpn curl http://ifconfig.me\r\n```\r\nУбедиться, что внутри netns у нас поднят OpenVPN и в сеть внутри netns мы выходим через наш OpenVPN. Теперь командой:\r\n```bash\r\n$ sudo ip netns exec vpn su - USER_NAME -c firefox\r\n```\r\nмы можем запустить браузер и получить браузер работающий через VPN, в то время, как вся остальная система у нас работает, как прежде и все остальное ходить напрямую(в команде замените USER_NAME на имя вашего пользователя). Пример запуска браузера приведен исходя из того, что на своем десктопе пользователь имеет sudo. Если кто-то может подсказать, как использовать ip netns exec без sudo буду признателен.\r\n\r\nАналогично браузеру вы можете запускать IM-клиенты, торрент-клиенты и все остальное. В случае, если firefox ругается при запуске, что не может подключиться к dbus поставьте в команде его запуска dbus-launch перед sudo.\r\n\r\nСкрипт для остановки нашего netns:\r\n```bash\r\n#!/bin/bash\r\nsudo ip netns pids vpn | xargs -rd'\\n' sudo kill\r\nsudo rm -rf /etc/netns/vpn\r\nsudo sysctl -q net.ipv4.ip_forward=0\r\nsudo iptables -D INPUT ! -i vpn0 -s 10.10.10.0/24 -j DROP\r\nsudo iptables -t nat -D POSTROUTING -s 10.10.10.0/24 -o en+ -j MASQUERADE\r\nsudo ip link del vpn0\r\nsudo ip netns delete vpn\r\n```\r\nЮниты для systemd поднимающие все указанное на автомате при загрузке. Юнит для netns:\r\n```\r\n[Unit]\r\nDescription=Network namespace for VPN\r\nAfter=syslog.target network.target\r\nStopWhenUnneeded=true\r\nRefuseManualStart=true\r\nRefuseManualStop=true\r\n \r\n[Service]\r\nEnvironmentFile=/etc/netns/vpn.env\r\nType=oneshot\r\nRemainAfterExit=true\r\nExecStart=/bin/ip netns add vpn\r\nExecStart=/bin/ip netns exec vpn ip addr add 127.0.0.1/8 dev lo\r\nExecStart=/bin/ip netns exec vpn ip link set lo up\r\nExecStart=/bin/ip link add vpn0 type veth peer name vpn1\r\nExecStart=/bin/ip link set vpn0 up\r\nExecStart=/bin/ip link set vpn1 netns vpn up\r\nExecStart=/bin/ip addr add ${NETWORK}.1/24 dev vpn0\r\nExecStart=/bin/ip netns exec vpn ip addr add ${NETWORK}.2/24 dev vpn1\r\nExecStart=/bin/ip netns exec vpn ip route add ${VPN_SERVER} via ${NETWORK}.1 dev vpn1\r\nExecStart=/bin/ip netns exec vpn ip route add default via ${NETWORK}.254 dev vpn1 \r\nExecStart=/sbin/iptables -A INPUT ! -i vpn0 -s ${NETWORK}.0/24 -j DROP\r\nExecStart=/sbin/iptables -t nat -A POSTROUTING -s ${NETWORK}.0/24 -o wl+ -j MASQUERADE\r\nExecStart=/sbin/sysctl -q net.ipv4.ip_forward=1\r\nExecStart=/bin/mkdir -p /etc/netns/vpn\r\nExecStart=/bin/sh -c \"echo 'nameserver 8.8.8.8' > /etc/netns/vpn/resolv.conf\"\r\n \r\nExecStop=/bin/rm -rf /etc/netns/vpn\r\nExecStop=/sbin/sysctl -q net.ipv4.ip_forward=0\r\nExecStop=/sbin/iptables -D INPUT ! -i vpn0 -s ${NETWORK}.0/24 -j DROP\r\nExecStop=/sbin/iptables -t nat -D POSTROUTING -s ${NETWORK}.0/24 -o wl+ -j MASQUERADE\r\nExecStop=/bin/ip link del vpn0\r\nExecStop=/bin/ip netns delete vpn\r\n \r\n[Install]\r\nWantedBy=multi-user.target\r\n```\r\nЮнит для OpenVPN:\r\n```\r\n[Unit]\r\nDescription=OpenVPN inside network namespace\r\nRequires=vpnns.service\r\nAfter=syslog.target network.target vpn-ns.service\r\n \r\n[Service]\r\nPrivateTmp=true\r\nType=forking\r\nPIDFile=/var/run/openvpn/%i.pid\r\nExecStart=/bin/ip netns exec vpn /usr/sbin/openvpn --daemon --writepid /var/run/openvpn/%i.pid --cd /etc/openvpn/ --config %i.conf\r\n \r\n[Install]\r\nWantedBy=multi-user.target\r\n```\r\nИ файл с переменными в котором я задаю адрес ВПН-сервера и сети используемой netns:\r\n```bash\r\nVPN_SERVER=1.1.1.1 # Change IP to your OpenVPN-server IP\r\nNETWORK=10.10.10\r\n```\r\nСкопировав файлы для systemd в их места на файловой системе командой\r\n\r\n```bash\r\n$ sudo systemctl enable openvpn-ns@NAME.service\r\n```\r\nгде NAME все то же имя вашего конфиг-файла OpenVPN. После этого можно запускать\r\n```bash\r\n$ sudo systemctl start openvpn-ns@NAME.service\r\n```\r\nOpenVPN запуститься в выделенном network namespace по имени vpn.\r\nКомандой\r\n```bash\r\n$ sudo ip netns exec vpn curl http://ifconfig.me\r\n```\r\nвы сможете проверить, что внутри netns теперь есть VPN и вы ходите с адреса своего сервера.\r\n\r\n[Юниты systemd на github](https://github.com/Ernillew/netns-vpn \"Юниты systemd на github\").\r\n\r\nСкрипты [vpnns_up.sh](https://gist.github.com/Ernillew/aa0a13e738d2165878111801c5144d18 \"vpnns_up.sh\") и[ vpnns_down.sh](https://gist.github.com/Ernillew/8b1d9f410806a56f374d5183c304ffcf \" vpnns_down.sh\") на gist.gihub.com\r\n\r\nПри подготовке статьи мне помогли две ссылки:\r\n\r\n[http://schnouki.net/posts/2014/12/12/openvpn-for-a-single-application-on-linux](http://schnouki.net/posts/2014/12/12/openvpn-for-a-single-application-on-linux)\r\n\r\n[https://www.linux.org.ru/forum/admin/11591881](https://www.linux.org.ru/forum/admin/11591881)\r\n\r\nОтдельная благодарность Сергею Воронову ака Рэйсту, после разговора с которым я и решил сделать конфиги и написать статью.\r\n\r\nP.S. Запуск VPN в выделенном network namespace может использоваться не только, как обход цензуры, но и для рабочих целей, я после того, как сделал юнит для OpenVPN сделал себе еще аналогичный поднимающий VPN до сети клиента, что бы можно было запускать с доступом к его сети только отдельные приложения.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}